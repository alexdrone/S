///Autogenerated file

// swiftlint:disable type_body_length
// swiftlint:disable type_name


import UIKit

private var __ApperanceProxyHandle: UInt8 = 0

///Your view should conform to 'AppearaceProxyComponent' in order to expose an appearance proxy
public protocol AppearaceProxyComponent: class {
	associatedtype ApperanceProxyType
	var appearanceProxy: ApperanceProxyType { get }
	func didChangeAppearanceProxy()
}

///Entry point for the app stylesheet
public class S {

//MARK: - FooView
	public static let FooView = FooViewAppearanceProxy()
	public class FooViewAppearanceProxy {

		//MARK: font 
		private var _font: UIFont?
		public func fontProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
			if let override = _font { return override }
			return Typography.smallProperty(traitCollection)
		}
		public var font: UIFont {
			get { return self.fontProperty() }
			set { _font = newValue }
		}

		//MARK: aRect 
		private var _aRect: CGRect?
		public func aRectProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> CGRect {
			if let override = _aRect { return override }
			return CGRect(x: 10.0, y: 10.0, width: 100.0, height: 100.0)
		}
		public var aRect: CGRect {
			get { return self.aRectProperty() }
			set { _aRect = newValue }
		}

		//MARK: aPoint 
		private var _aPoint: CGPoint?
		public func aPointProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> CGPoint {
			if let override = _aPoint { return override }
			return CGPoint(x: 10.0, y: 10.0)
		}
		public var aPoint: CGPoint {
			get { return self.aPointProperty() }
			set { _aPoint = newValue }
		}

		//MARK: image 
		private var _image: UIImage?
		public func imageProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIImage {
			if let override = _image { return override }
			return UImage(named: "myimage")!
		}
		public var image: UIImage {
			get { return self.imageProperty() }
			set { _image = newValue }
		}

		//MARK: margin 
		private var _margin: CGFloat?
		public func marginProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> CGFloat {
			if let override = _margin { return override }
			return CGFloat(12.0)
		}
		public var margin: CGFloat {
			get { return self.marginProperty() }
			set { _margin = newValue }
		}

		//MARK: opaque 
		private var _opaque: Bool?
		public func opaqueProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> Bool {
			if let override = _opaque { return override }
			return true
		}
		public var opaque: Bool {
			get { return self.opaqueProperty() }
			set { _opaque = newValue }
		}

		//MARK: textAlignment 
		private var _textAlignment: NSTextAlignment?
		public func textAlignmentProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> NSTextAlignment {
			if let override = _textAlignment { return override }
			return NSTextAlignment.Center
		}
		public var textAlignment: NSTextAlignment {
			get { return self.textAlignmentProperty() }
			set { _textAlignment = newValue }
		}

		//MARK: aSize 
		private var _aSize: CGSize?
		public func aSizeProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> CGSize {
			if let override = _aSize { return override }
			return CGSize(width: 100.0, height: 100.0)
		}
		public var aSize: CGSize {
			get { return self.aSizeProperty() }
			set { _aSize = newValue }
		}
	}
//MARK: - DefaultButton
	public static let DefaultButton = DefaultButtonAppearanceProxy()
	public class DefaultButtonAppearanceProxy: FooViewAppearanceProxy {

		//MARK: opaque 
		override public func opaqueProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> Bool {
			if let override = _opaque { return override }
			return false
		}

		//MARK: margin 
		override public func marginProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> CGFloat {
			if let override = _margin { return override }
			return CGFloat(12.0)
		}

		//MARK: color 
		private var _color: UIColor?
		public func colorProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIColor {
			if let override = _color { return override }
			return Color.blueProperty(traitCollection)
		}
		public var color: UIColor {
			get { return self.colorProperty() }
			set { _color = newValue }
		}
	}
//MARK: - Color
	public static let Color = ColorAppearanceProxy()
	public class ColorAppearanceProxy {

		//MARK: blue 
		private var _blue: UIColor?
		public func blueProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIColor {
			if let override = _blue { return override }
			return UIColor(red: 0.666667, green: 0.733333, blue: 0.8, alpha: 0.12549)
		}
		public var blue: UIColor {
			get { return self.blueProperty() }
			set { _blue = newValue }
		}

		//MARK: red 
		private var _red: UIColor?
		public func redProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIColor {
			if let override = _red { return override }
			if UIDevice.currentDevice().userInterfaceIdiom == UIUserInterfaceIdiom.Phone && UIScreen.mainScreen().bounds.size.width > 300.0 { 
			return UIColor(red: 1.0, green: 0.8, blue: 0.0, alpha: 1.0)
			}
			if UIDevice.currentDevice().userInterfaceIdiom == UIUserInterfaceIdiom.Phone && UIScreen.mainScreen().bounds.size.width < 300.0 { 
			return UIColor(red: 1.0, green: 0.8, blue: 0.0, alpha: 1.0)
			}
			
			return UIColor(red: 1.0, green: 0.8, blue: 0.0, alpha: 1.0)
		}
		public var red: UIColor {
			get { return self.redProperty() }
			set { _red = newValue }
		}
	}
//MARK: - Typography
	public static let Typography = TypographyAppearanceProxy()
	public class TypographyAppearanceProxy {

		//MARK: small 
		private var _small: UIFont?
		public func smallProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
			if let override = _small { return override }
			return UIFont.systemFontOfSize(12.0)
		}
		public var small: UIFont {
			get { return self.smallProperty() }
			set { _small = newValue }
		}

		//MARK: medium 
		private var _medium: UIFont?
		public func mediumProperty(traitCollection: UITraitCollection? = UIScreen.mainScreen().traitCollection) -> UIFont {
			if let override = _medium { return override }
			return UIFont.systemFontOfSize(18.0, weight: UIFontWeightSemibold)
		}
		public var medium: UIFont {
			get { return self.mediumProperty() }
			set { _medium = newValue }
		}
	}

}
extension FooView: AppearaceProxyComponent {

	public typealias ApperanceProxyType = S.FooViewAppearanceProxy
	public var appearanceProxy: ApperanceProxyType {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ApperanceProxyHandle) as? ApperanceProxyType else { return S.FooView }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ApperanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}
}


extension DefaultButton: AppearaceProxyComponent {

	public typealias ApperanceProxyType = S.DefaultButtonAppearanceProxy
	public var appearanceProxy: ApperanceProxyType {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ApperanceProxyHandle) as? ApperanceProxyType else { return S.DefaultButton }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ApperanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}
}

