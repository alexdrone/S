///Autogenerated file

import Cocoa

///Entry point for the app stylesheet
@objc public class S: NSObject {

//MARK: - Typography
	@objc public static let Typography = TypographyStyle()
	@objc public class TypographyStyle: NSObject {

		//MARK: small 
		private var __small: NSFont?
		private func smallIn() -> NSFont {
			if let override = __small { return override }
			return NSFont.systemFontOfSize(12.0)
		}
		@objc public var small: NSFont {
			get { return self.smallIn() }
			set { __small = newValue }
		}

		//MARK: medium 
		private var __medium: NSFont?
		private func mediumIn() -> NSFont {
			if let override = __medium { return override }
			return NSFont.systemFontOfSize(18.0)
		}
		@objc public var medium: NSFont {
			get { return self.mediumIn() }
			set { __medium = newValue }
		}
	}
//MARK: - DefaultButton
	@objc public static let DefaultButton = DefaultButtonStyle()
	@objc public class DefaultButtonStyle: ButtonStyle {

		//MARK: opaque 
		override private func opaqueIn() -> Bool {
			if let override = __opaque { return override }
			return false
		}

		//MARK: margin 
		override private func marginIn() -> Float {
			if let override = __margin { return override }
			return Float(12.0)
		}

		//MARK: color 
		private var __color: NSColor?
		private func colorIn() -> NSColor {
			if let override = __color { return override }
			return Color.blueIn()
		}
		@objc public var color: NSColor {
			get { return self.colorIn() }
			set { __color = newValue }
		}
	}
//MARK: - Button
	@objc public static let Button = ButtonStyle()
	@objc public class ButtonStyle: NSObject {

		//MARK: opaque 
		private var __opaque: Bool?
		private func opaqueIn() -> Bool {
			if let override = __opaque { return override }
			return true
		}
		@objc public var opaque: Bool {
			get { return self.opaqueIn() }
			set { __opaque = newValue }
		}

		//MARK: margin 
		private var __margin: Float?
		private func marginIn() -> Float {
			if let override = __margin { return override }
			return Float(12.0)
		}
		@objc public var margin: Float {
			get { return self.marginIn() }
			set { __margin = newValue }
		}

		//MARK: font 
		private var __font: NSFont?
		private func fontIn() -> NSFont {
			if let override = __font { return override }
			return Typography.smallIn()
		}
		@objc public var font: NSFont {
			get { return self.fontIn() }
			set { __font = newValue }
		}
	}
//MARK: - Color
	@objc public static let Color = ColorStyle()
	@objc public class ColorStyle: NSObject {

		//MARK: blue 
		private var __blue: NSColor?
		private func blueIn() -> NSColor {
			if let override = __blue { return override }
			return NSColor(red: 0.666667, green: 0.733333, blue: 0.8, alpha: 1.0)
		}
		@objc public var blue: NSColor {
			get { return self.blueIn() }
			set { __blue = newValue }
		}

		//MARK: red 
		private var __red: NSColor?
		public func redIn() -> NSColor {
			if let override = __red { return override }
			if NSApplication.sharedApplication().mainWindow?.frame.size.width > 300.0  { 
			return NSColor(red: 1.0, green: 0.8, blue: 0.0, alpha: 1.0) }
			if NSApplication.sharedApplication().mainWindow?.frame.size.width < 300.0  { 
			return NSColor(red: 1.0, green: 0.8, blue: 0.0, alpha: 1.0) }
			
			return NSColor(red: 1.0, green: 0.8, blue: 0.0, alpha: 1.0)
		}
		@objc public var red: NSColor {
			get { return self.redIn() }
			set { __red = newValue }
		}
	}

}