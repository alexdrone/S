///Autogenerated file

import Cocoa

///Entry point for the app stylesheet
public class S {

//MARK: - DefaultButton
	public static let DefaultButton = DefaultButtonAppearanceProxy()
	public class DefaultButtonAppearanceProxy: FooViewAppearanceProxy {

		//MARK: opaque 
		override private func opaqueProperty() -> Bool {
			if let override = _opaque { return override }
			return false
		}

		//MARK: margin 
		override private func marginProperty() -> CGFloat {
			if let override = _margin { return override }
			return CGFloat(12.0)
		}

		//MARK: color 
		private var _color: NSColor?
		private func colorProperty() -> NSColor {
			if let override = _color { return override }
			return Color.blueProperty()
		}
		public var color: NSColor {
			get { return self.colorProperty() }
			set { _color = newValue }
		}
	}
//MARK: - Typography
	public static let Typography = TypographyAppearanceProxy()
	public class TypographyAppearanceProxy {

		//MARK: small 
		private var _small: NSFont?
		private func smallProperty() -> NSFont {
			if let override = _small { return override }
			return NSFont(name: "Helvetica", size: 12.0)!
		}
		public var small: NSFont {
			get { return self.smallProperty() }
			set { _small = newValue }
		}

		//MARK: medium 
		private var _medium: NSFont?
		private func mediumProperty() -> NSFont {
			if let override = _medium { return override }
			return NSFont(name: "Helvetica", size: 18.0)!
		}
		public var medium: NSFont {
			get { return self.mediumProperty() }
			set { _medium = newValue }
		}
	}
//MARK: - FooView
	public static let FooView = FooViewAppearanceProxy()
	public class FooViewAppearanceProxy {

		//MARK: backgroundColor 
		private var _backgroundColor: NSColor?
		private func backgroundColorProperty() -> NSColor {
			if let override = _backgroundColor { return override }
			return Color.redProperty()
		}
		public var backgroundColor: NSColor {
			get { return self.backgroundColorProperty() }
			set { _backgroundColor = newValue }
		}

		//MARK: margin 
		private var _margin: CGFloat?
		private func marginProperty() -> CGFloat {
			if let override = _margin { return override }
			return CGFloat(12.0)
		}
		public var margin: CGFloat {
			get { return self.marginProperty() }
			set { _margin = newValue }
		}

		//MARK: font 
		private var _font: NSFont?
		private func fontProperty() -> NSFont {
			if let override = _font { return override }
			return Typography.smallProperty()
		}
		public var font: NSFont {
			get { return self.fontProperty() }
			set { _font = newValue }
		}

		//MARK: opaque 
		private var _opaque: Bool?
		private func opaqueProperty() -> Bool {
			if let override = _opaque { return override }
			return true
		}
		public var opaque: Bool {
			get { return self.opaqueProperty() }
			set { _opaque = newValue }
		}
	}
//MARK: - Color
	public static let Color = ColorAppearanceProxy()
	public class ColorAppearanceProxy {

		//MARK: blue 
		private var _blue: NSColor?
		private func blueProperty() -> NSColor {
			if let override = _blue { return override }
			return NSColor(red: 0.0, green: 1.0, blue: 0.0, alpha: 1.0)
		}
		public var blue: NSColor {
			get { return self.blueProperty() }
			set { _blue = newValue }
		}

		//MARK: red 
		private var _red: NSColor?
		public func redProperty() -> NSColor {
			if let override = _red { return override }
			if NSApplication.sharedApplication().mainWindow?.frame.size.width < 300.0  { 
			return NSColor(red: 0.666667, green: 0.0, blue: 0.0, alpha: 1.0)
			}
			
			return NSColor(red: 1.0, green: 0.0, blue: 0.0, alpha: 1.0)
		}
		public var red: NSColor {
			get { return self.redProperty() }
			set { _red = newValue }
		}
	}

}